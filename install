#! /usr/bin/env python

from pathlib import Path
import sys

# Checks all system manifests against the current system

# the union of all declared manifests
system_manifest = {
    "rpm_packages": set([]),
    "rpm_ascs": set([]),
    "stow_packages_home": set([]),
    "stow_packages_root": set([]),
}

class SpecdNames:
    """ Well Known file and folder names specified (spec'd) for various purposes """
    RPM_PACKAGES = "rpm-packages.txt"
    RPM_ASCS = "rpm-ascs.txt"
    STOW_HOME = "stow_home"
    STOW_ROOT = "stow_root"

manifests = Path(__file__).parent / "manifests"

for rpm_packages in manifests.rglob(SpecdNames.RPM_PACKAGES):
    with open(rpm_packages, 'r') as f:
        contents = f.read()
        packages = [p.strip() for p in contents.split("\n") if p]
        system_manifest["rpm_packages"].update(packages)

for rpm_ascs in manifests.rglob(SpecdNames.RPM_ASCS):
    with open(rpm_ascs, 'r') as f:
        contents = f.read()
        ascs = [a.strip() for a in contents.split('\n') if a]
        system_manifests["rpm_ascs"].update(ascs)

for stow_packages_home in manifests.rglob(SpecdNames.STOW_HOME):
    system_manifest["stow_packages_home"] = stow_packages_home

for stow_packages_root in manifests.rglob(SpecdNames.STOW_ROOT):
    system_manifest["stow_packages_root"] = stow_packages_root

print(system_manifest)   

sys.exit(0)

# TODO make finding the manifests folder robust.
# Currently its just looking relative to the script call
for entry in os.scandir("manifests"):
    if entry.is_dir():
        process_declaration(manifests, entry)

from pprint import pprint
pprint(manifests)

# It generates a plan to bring the system into the declared state

# It executes that plan

